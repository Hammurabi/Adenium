struct_type:
  struct
  class
  contract
module_declaration:
  module ident '{' (structure | class_member | module_declaration)* '}'
structure:
  struct_type ident '{' class_member* '}'
method:
  static* access_mod* fn ident '(' method_arguments* ')' '{' statement* '}'
  access_mod* static* fn ident '(' method_arguments* ')' '{' statement* '}'
function_pointer:
  static* access_mod* path '(' paths* ')' ident ';'
  access_mod* static* path '(' paths* ')' ident ';'
field:
  function_pointer
  static* access_mod* path ident '=' expression ';'
  access_mod* static* path ident ';'
paths:
  path ',' paths
  path
identifiers:
  ident ',' identifiers
  ident
variable:
  'let' identifiers '=' expression
  identifiers ident '=' expression
  identifiers ident
method_argument:
  path ident
method_arguments:
  method_argument ',' method_arguments
  method_argument
function_arguments:
  expression ',' function_arguments
  expression
class_member:
  field
  method
cast:
  '(' identifiers ')'
tuple:
  '(' tuple_expressions ')'
tuple_expressions:
  expression ',' tuple_expressions
  expression
lambda_expression:
  '(' method_arguments ')' '=>' '{' statement* '}'
assignment:
  member_access '=' expression
basic_expression:
  member_access
  logical_not
  bitwise_not
  string
  int
  dec
  cast basic_expression
expression:
  bitwise_or
  bitwise_and
  equality_exp
  comparison_exp
  shift_exp
  add_exp
  mul_exp
  basic_expression
  lambda_expression
  tuple
  '(' expression ')'
subscribt:
  '[' expression ']'
path:
  ident '.' path
  ident
member:
  function_call subscribt*
  ident subscribt*
member_access:
  member '.' member_access
  member
function_call:
  ident '(' function_arguments* ')'
ternary_statement:
  '?' expression ':' function_call
prefix:
  '++' member_access
  '--' member_access
postfix:
  member_access '++'
  member_access '--'
return_statement:
  return tuple_expressions
  return
using:
  using member_access
statement:
  using ';'
  prefix ';'
  postfix ';'
  assignment ';'
  variable ';'
  ternary_statement ';'
  return_statement ';'
logical_not:
  '!' basic_expression
bitwise_not:
  '~' basic_expression
mul_exp:
  basic_expression ('*' | '/' | '%' | '**') basic_expression (('*' | '/' | '%' | '**') basic_expression)*
add_exp:
  (mul_exp | basic_expression) ('+' | '-') (mul_exp | basic_expression) (('+' | '-') (mul_exp | basic_expression))*
shift_exp:
  (add_exp | mul_exp | basic_expression) ('>>>' | '>>' | '<<') (add_exp | mul_exp | basic_expression) (('>>>' | '>>' | '<<') (add_exp | mul_exp | basic_expression))*
comparison_exp:
  (shift_exp | add_exp | mul_exp | basic_expression) ('>=' | '<=' | '>' | '<') (shift_exp | add_exp | mul_exp | basic_expression) (('>=' | '<=' | '>' | '<') (shift_exp | add_exp | mul_exp | basic_expression))*
equality_exp:
  (comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) ('==' | '!=') (comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) (('==' | '!=') (comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression))*
bitwise_and:
  (equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) '&' (equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) ('&' (equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression))*
bitwise_or:
  (bitwise_and | equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) '|' (bitwise_and | equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression) ('|' (bitwise_and | equality_exp | comparison_exp | shift_exp | add_exp  | mul_exp | basic_expression))*
logical_and:
  bitwise_or '&&' bitwise_or logical_and_atm*
logical_or:
  logical_and '||' logical_and logical_or_atm*
